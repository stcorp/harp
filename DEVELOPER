Developer Documentation
=======================

This document contains specific instructions for HARP developers.

Commit steps
------------
If your changes impact any of the autogenerated parts, make sure these
get regenerated (all using the autotools build system):

Run 'make doc' to regenerate the documentation.
Current versions used for generating the documentation are:
- Sphinx 1.4.5
- sphinx-autobuild 0.6.0
- sphinx-rtd-theme 0.1.9
- breathe 4.2.0
- doxygen 1.8.11
With the following versions for third party dependencies:
- Babel 2.3.4
- Jinja2 2.8
- MarkupSafe 0.23
- PyYAML 3.11
- Pygments 2.1.3
- alabaster 0.7.9
- argh 0.26.2
- backports-abc 0.4
- certifi 2016.02.28
- docutils 0.12
- imagesize 0.7.1
- livereload 2.4.1
- pathtools 0.1.2
- port-for 0.3.1
- pytz 2016.6.1
- singledispatch 3.4.0.3
- six 1.10.0
- snowballstemmer 1.2.1
- tornado 4.4
- watchdog 0.8.3

Run 'make dist' to have config.h.cmake.in and harp.h.cmake.in updated to be
in line with config.h.in and harp.h.in.

Make sure that python/_harpc.py gets updated with any change to harp.h.in.
This should happen automatically using the Makefile dependencies.
But, make sure to do this by performing an in-source build of HARP such that
the _harpc.py file in the python subdirectory of the source tree gets replaced.
Current versions of cffi and pycparser for generating the python interface are:
- cffi 1.7.0
- pycparser 2.14

Run 'make indent' using GNU indent (2.2.11) to update the indentation of the C
code. You may have to run it twice to work around flipping indentation choices
of GNU indent.

Release checklist
-----------------
- make sure all 'commit steps' (see above) have been performed
- ensure automake and CMake builds are consistent
- check compiler warnings
- increase HARP version number in configure.ac + CMakeLists.txt + doc/conf.py
  format version is x.y(.z).
  Increase x for big backward compatibility breaking changes.
  Otherwise, increase y if any features were introduced.
  Only add/increase z for bug fix releases.
- update HARP format version if needed (configure.ac + CMakeLists.txt)
  format version is x.y (major.minor version).
  major version increases are for changes in the structure:
  - basic data types
  - attribute names and data types
  - dimension names
  minor version increases are for changes in the content conventions:
  - variable naming
  - ascending/descending contraints
  - dimension ordering
  so (x+1).* routines will usually need a modified reading routine to read x.*
  and x.(y+1) routines should be able to map from x.y after reading a product
  there is no forward compatibility, so higher versions will always be rejected
- update version number of shared libharp library (both in configure.ac and
  CMakeLists.txt)
- make sure all documentation is updated accordingly
- update README (version number!)
- update CHANGES

Conventions
-----------
- Don't use a starting capital letter or terminating period for warning/error
  messages. Treat messages as something that could be included between
  parentheses as part of a larger sentence. Try to stick to a single sentence
  for a message. If you have to use multiple sentences then separate them with
  a semicolon.
- The same capitalization/punctuation rule for messages also applies for
  descriptions used in product ingestions.
